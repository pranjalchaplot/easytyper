/* --- Base Styles & Theme --- */
@import url("https://fonts.googleapis.com/css2?family=Montserrat:wght@400;500;700&family=Roboto+Mono&display=swap");

:root {
  /* Light Mode Base Colors */
  --bgColor: #f8f9fa;
  --panelBgColor: #ffffff;
  --borderColor: #e0e0e0;
  --textPrimary: #212529;
  --textSecondary: #6c757d;
  --primaryColor: #007bff;
  --buttonBg: linear-gradient(
    135deg,
    rgba(255, 255, 255, 0.8),
    rgba(240, 240, 240, 0.8)
  );
  --buttonHoverBg: linear-gradient(
    135deg,
    rgba(255, 255, 255, 0.9),
    rgba(240, 240, 240, 0.9)
  );
  --buttonBorder: rgba(0, 0, 0, 0.1);
  --buttonShadow: 0 2px 4px rgba(0, 0, 0, 0.05);
  --buttonHoverShadow: 0 4px 6px rgba(0, 0, 0, 0.1);
  --iconBtnHoverBg: #f0f0f0;
  --formatIndicatorBg: #f5f5f5;
  --formatIndicatorColor: #666;
  --sliderTrackColor: var(--borderColor);
  --sliderThumbColor: var(--primaryColor);

  /* Dark Mode Overrides (applied via body.dark-mode) */
  --darkBgColor: #121212;
  --darkPanelBgColor: #1e1e1e;
  --darkBorderColor: #333;
  --darkTextPrimary: #e0e0e0;
  --darkTextSecondary: #a0a0a0;
  --darkPrimaryColor: #4dabf7;
  --darkButtonBg: linear-gradient(
    135deg,
    rgba(50, 50, 50, 0.8),
    rgba(40, 40, 40, 0.8)
  );
  --darkButtonHoverBg: linear-gradient(
    135deg,
    rgba(55, 55, 55, 0.9),
    rgba(45, 45, 45, 0.9)
  );
  --darkButtonBorder: rgba(255, 255, 255, 0.1);
  --darkButtonShadow: 0 2px 4px rgba(255, 255, 255, 0.05);
  --darkButtonHoverShadow: 0 4px 6px rgba(255, 255, 255, 0.1);
  --darkIconBtnHoverBg: #333;
  --darkFormatIndicatorBg: #333;
  --darkFormatIndicatorColor: #ccc;
  --darkSliderTrackColor: var(--darkBorderColor);
  --darkSliderThumbColor: var(--darkPrimaryColor);

  /* Configurable Typing Area Variables */
  --line-height-relative: 1.8; /* Unitless line-height multiplier */
  --line-count: 4; /* Default lines */
  --word-font-size: 1.5rem; /* Default font size - NOW DYNAMICALLY SET */
  --words-per-line: 10; /* Approx target words per line */
}

* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

html {
  height: 100%; /* Needed for body height 100% */
  min-height: 450px;
}

body {
  font-family: "Montserrat", sans-serif;
  width: 700px; /* Fixed width for extension popup */
  height: 100%; /* Make body fill html height */
  min-height: 450px; /* Optional: set a minimum sensible height */
  overflow: hidden; /* Hide overflow for popup */
  background-color: var(--bgColor);
  color: var(--textPrimary);
  transition: background-color 0.3s ease, color 0.3s ease;
  font-size: 14px; /* Base font size */
}

.container {
  display: flex;
  flex-direction: column;
  height: 100%; /* Fill body height */
  min-height: 0; /* Flexbox fix */
  padding: 10px;
  background-color: var(--panelBgColor);
  transition: background-color 0.3s ease;
}

.header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 10px 10px 0 10px; /* Reduced bottom padding */
  flex-shrink: 0; /* Prevent header from shrinking */
}

h1.header-title {
  font-size: 18px;
  font-weight: 600;
  color: var(--textPrimary);
}

.actions {
  display: flex;
  gap: 10px;
}

.icon-btn {
  background: none;
  border: none;
  cursor: pointer;
  padding: 5px;
  display: flex;
  align-items: center;
  justify-content: center;
  border-radius: 4px;
  color: var(--textSecondary);
  transition: background-color 0.2s, color 0.2s;
  position: relative;
  width: 28px;
  height: 28px;
}

.icon-btn svg {
  stroke: currentColor;
}

.icon-btn:hover {
  background-color: var(--iconBtnHoverBg);
  color: var(--textPrimary);
}

#sunIcon,
#moonIcon {
  position: absolute;
  transition: opacity 0.4s ease;
  top: 4px;
  left: 4px;
}

#moonIcon {
  opacity: 0;
  fill: currentColor;
  stroke: none;
}

body.dark-mode #sunIcon {
  opacity: 0;
}
body.dark-mode #moonIcon {
  opacity: 1;
}

/* --- NEW Settings Bar --- */
.settings-bar {
  display: flex;
  justify-content: space-between; /* Distribute items */
  align-items: center;
  padding: 6px 10px;
  flex-shrink: 0;
  gap: 10px; /* Spacing between controls */
  flex-wrap: wrap; /* Allow wrapping if needed */
  margin-bottom: 10px; /* Space before game area */
}

.setting-control {
  /* position: relative; /* No longer needed for absolute slider */
  display: flex;
  align-items: center;
  gap: 8px; /* Add gap between indicator and slider */
}

/* Ensure last item (button) takes remaining space */
.settings-bar #buttons {
  margin-left: auto; /* Push button to the right */
}

/* Style all info indicators */
#info,
#linesInfo,
#wplInfo {
  min-width: 60px;
  text-align: center;
  color: var(--primaryColor); /* Use theme primary color */
  font-weight: 500;
}

body.dark-mode #info,
body.dark-mode #linesInfo,
body.dark-mode #wplInfo {
  color: var(--darkPrimaryColor);
}

/* --- Slider Styles --- */
.slider-container {
  display: none; /* Hidden by default */
  /* Removed absolute positioning and popup styles */
  align-items: center; /* Align items within the container (the slider itself) */
  /* background-color: var(--panelBgColor); */ /* No background needed */
  /* padding: 8px 12px; */ /* No padding needed */
  /* border-radius: 4px; */
  /* box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2); */
  /* margin-top: 4px; */
  /* min-width: 150px; */ /* Slider width set directly now */
}

/* body.dark-mode .slider-container { */ /* No special dark mode background needed */
/* background-color: var(--darkPanelBgColor); */
/* box-shadow: 0 2px 5px rgba(255, 255, 255, 0.1); */
/* } */

.slider {
  -webkit-appearance: none;
  width: 100px; /* Give slider a fixed width */
  height: 4px;
  border-radius: 2px;
  background: var(--sliderTrackColor);
  outline: none;
  transition: background 0.3s;
  cursor: pointer;
}

body.dark-mode .slider {
  background: var(--darkSliderTrackColor);
}

.slider::-webkit-slider-thumb {
  -webkit-appearance: none;
  appearance: none;
  width: 14px;
  height: 14px;
  border-radius: 50%;
  background: var(--sliderThumbColor);
  cursor: pointer;
  transition: background 0.3s, transform 0.2s;
}

.slider::-moz-range-thumb {
  width: 14px;
  height: 14px;
  border-radius: 50%;
  background: var(--sliderThumbColor);
  cursor: pointer;
  transition: background 0.3s, transform 0.2s;
  border: none;
}

.slider:hover::-webkit-slider-thumb {
  transform: scale(1.2);
}

.slider:hover::-moz-range-thumb {
  transform: scale(1.2);
}

body.dark-mode .slider::-webkit-slider-thumb {
  background: var(--darkSliderThumbColor);
}

body.dark-mode .slider::-moz-range-thumb {
  background: var(--darkSliderThumbColor);
}

.panels {
  flex: 1; /* Take remaining vertical space */
  padding: 0 10px 0 10px; /* Adjusted padding */
  overflow: hidden; /* Hide overflow within panels */
  display: flex; /* Use flex for main content */
  flex-direction: column; /* Stack main vertically */
  min-height: 0; /* Crucial flexbox fix for overflow */
}

.footer {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 6px 10px 10px 10px;
  flex-shrink: 0; /* Prevent footer from shrinking */
}

.btn {
  padding: 6px 14px;
  background: var(--buttonBg);
  border: 1px solid var(--buttonBorder);
  border-radius: 6px;
  cursor: pointer;
  display: inline-flex;
  align-items: center;
  gap: 5px;
  transition: background-color 0.2s, box-shadow 0.2s, border-color 0.2s,
    transform 0.1s;
  font-family: "Montserrat", sans-serif;
  font-weight: 500;
  font-size: 13px;
  color: var(--textPrimary);
  backdrop-filter: blur(5px);
  -webkit-backdrop-filter: blur(5px);
}

.btn:hover {
  background: var(--buttonHoverBg);
  box-shadow: var(--buttonHoverShadow);
}
.btn:active {
  transform: scale(0.98); /* Slight shrink on click */
}

.format-indicator {
  font-size: 12px;
  color: var(--formatIndicatorColor);
  font-family: "Montserrat", sans-serif;
  padding: 4px 8px;
  border-radius: 4px;
  background-color: var(--formatIndicatorBg);
  transition: background-color 0.3s ease, color 0.3s ease;
  white-space: nowrap; /* Prevent wrapping */
}

.format-indicator.interactive {
  cursor: pointer;
}

.format-indicator.interactive:hover {
  background-color: var(--iconBtnHoverBg);
}

/* --- Dark Mode Specific Styles --- */
body.dark-mode {
  background-color: var(--darkBgColor);
  color: var(--darkTextPrimary);
}

body.dark-mode .container {
  background-color: var(--darkPanelBgColor);
}

body.dark-mode .header,
body.dark-mode .footer,
body.dark-mode .settings-bar {
  /* Apply border to settings bar too */
  border-color: var(--darkBorderColor);
}

body.dark-mode h1.header-title {
  color: var(--darkTextPrimary);
}

body.dark-mode .icon-btn {
  color: var(--darkTextSecondary);
}

body.dark-mode .icon-btn:hover {
  background-color: var(--darkIconBtnHoverBg);
  color: var(--darkTextPrimary);
}

body.dark-mode .btn {
  background: var(--darkButtonBg);
  border-color: var(--darkButtonBorder);
  color: var(--darkTextPrimary);
}

body.dark-mode .btn:hover {
  background: var(--darkButtonHoverBg);
  box-shadow: var(--darkButtonHoverShadow);
}

body.dark-mode .format-indicator {
  background-color: var(--darkFormatIndicatorBg);
  color: var(--darkFormatIndicatorColor);
}

body.dark-mode .format-indicator.interactive:hover {
  background-color: var(--darkIconBtnHoverBg);
}

/* --- Typing Game Styles --- */
main.typing-main {
  width: 100%;
  margin: 0;
  display: flex;
  flex-direction: column;
  justify-content: center; /* Center the game panel vertically */
  flex: 1; /* Take remaining space within panels */
  min-height: 0; /* Crucial flexbox fix */
}

/* Typing Game Area */
div#game {
  font-family: "Roboto Mono", monospace; /* Font for typing */
  line-height: var(--line-height-relative); /* Set base line height */
  /* Calculate height: lines * font-size * relative-line-height */
  /* IMPORTANT: Height transition requires explicit height */
  height: calc(
    var(--line-count) * var(--word-font-size) * var(--line-height-relative)
  );
  min-height: calc(
    1 * 1rem * var(--line-height-relative)
  ); /* Minimum height for 1 line at 1rem */
  overflow: hidden; /* Clip content beyond the calculated height */
  position: relative; /* For absolute positioning of cursor and focus-error */
  border-radius: 4px;
  padding: 5px;
  /* Let the main area handle flex growth, game area uses calculated height */
  flex: 0 0 auto; /* Don't grow or shrink based on flex, use calculated height */
  background-color: var(--bgColor);
  transition: border-color 0.3s ease, background-color 0.3s ease,
    height 0.2s ease-out; /* Added height transition */
  cursor: text;
  margin-bottom: 10px; /* Space before footer */
}

body.dark-mode div#game {
  border-color: var(--darkBorderColor);
  background-color: var(--darkBgColor);
}

div#game:focus {
  outline: 1px solid var(--primaryColor);
  border-color: var(--primaryColor);
}

body.dark-mode div#game:focus {
  outline-color: var(--darkPrimaryColor);
  border-color: var(--darkPrimaryColor);
}

#words {
  /* Words container takes full width and allows wrapping */
  width: 100%;
  height: 100%; /* Fill the #game container */
  overflow-y: hidden; /* Controlled by #game height and scrolling logic */
  color: var(--textSecondary);
  transition: filter 0.2s ease, opacity 0.3s ease, font-size 0.2s ease-out; /* Added font-size transition */
  font-size: var(--word-font-size); /* Apply dynamic font size here */
}

#game:focus #words {
  filter: blur(0);
}

body.dark-mode #words {
  color: var(--darkTextSecondary);
}

#focus-error {
  position: absolute;
  inset: 0;
  display: flex;
  align-items: center;
  justify-content: center;
  color: var(--textSecondary);
  background-color: rgba(0, 0, 0, 0.1);
  border-radius: 4px;
  pointer-events: none;
  transition: opacity 0.2s;
  opacity: 1;
}

body.dark-mode #focus-error {
  color: var(--darkTextSecondary);
  background-color: rgba(255, 255, 255, 0.1);
}

#game:focus #focus-error {
  opacity: 0;
  pointer-events: none; /* Ensure it's not interactable when hidden */
}

/* Words and Letters */
div.word {
  display: inline-block; /* Keep words inline */
  margin: 0 0.25em; /* Use em for margin relative to font size */
  line-height: inherit; /* Inherit from #game */
  white-space: nowrap; /* Keep letters within a word together */
  /* Font size is inherited from #words */
}

.letter {
  display: inline-block; /* Keep letters inline */
  font-size: inherit; /* Inherit font size from .word (ultimately #words) */
  transition: color 0.1s ease-in-out, background-color 0.1s ease-in-out;
  min-width: 0.1em; /* Prevent collapsing */
  color: inherit; /* Inherit color from #words */
}

.letter.correct {
  color: var(--textPrimary);
}

body.dark-mode .letter.correct {
  color: var(--darkTextPrimary);
}

.letter.incorrect {
  color: #dc3545; /* Red for incorrect */
  background-color: rgba(220, 53, 69, 0.1);
  border-radius: 2px;
}

body.dark-mode .letter.incorrect {
  color: #f8d7da;
  background-color: rgba(248, 215, 218, 0.1);
}

/* Cursor Styling */
@keyframes blink {
  0%,
  100% {
    opacity: 1;
  }
  50% {
    opacity: 0;
  }
}

#cursor {
  display: none; /* Hidden by default */
  width: 2px;
  /* Base height on font size variable and relative line height */
  height: calc(
    var(--word-font-size) * var(--line-height-relative) * 0.8
  ); /* Adjust multiplier (e.g., 0.8) as needed */
  background: var(--primaryColor);
  position: absolute;
  animation: blink 0.5s infinite;
  border-radius: 1px;
  transition: background-color 0.3s ease, height 0.2s ease-out, top 0.05s linear,
    left 0.05s linear; /* Faster position transition */
  pointer-events: none;
}

body.dark-mode #cursor {
  background: var(--darkPrimaryColor);
}

#game:focus #cursor {
  display: block;
}

/* Game Over State */
#game.over #words {
  opacity: 0.6;
  filter: blur(0px);
}

#game.over:focus #cursor {
  display: none;
}

#game.over #focus-error {
  opacity: 0; /* Hide focus error when game is over */
}

/* Footer Indicators */
.footer .format-indicator {
  min-width: 80px;
  text-align: center;
}
